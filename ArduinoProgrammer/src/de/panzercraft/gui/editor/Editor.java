/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.panzercraft.gui.editor;

import de.panzercraft.main.ArduinoProgrammer;
import static de.panzercraft.main.ArduinoProgrammer.VERSION;
import jaddon.controller.JFrameManager;
import jaddon.controller.StaticStandard;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;

/**
 *
 * @author Paul
 */
public class Editor extends JFrameManager implements ActionListener, WindowListener {
    
    private final ArrayList<EditorTab> editortabs = new ArrayList<>();
    private int pre_work_title = -1;

    /**
     * Creates new form Editor
     * @param title String title
     */
    public Editor(Component c, String title) {
        super(title, VERSION);
        initComponents();
        init(c);
        ArduinoProgrammer.editors.add(this);
    }
    
    private void init(Component c) {
        setSize(new Dimension(600, 400));
        setDefaultCloseOperation(JFrameManager.DO_NOTHING_ON_CLOSE);
        addWindowListener(this);
        pack();
        setLocationRelativeTo(c);
        updateAll();
        M1I1.addActionListener(this);
    }
    
    public EditorTab addTab(String name) {
        try {
            EditorTab editortab = new EditorTab(this, name);
            editortabs.add(editortab);
            editortab.add();
            updateAll();
            return editortab;
        } catch (Exception ex) {
            updateAll();
            StaticStandard.logErr("Error while adding tab to editor: " + ex, ex);
            return null;
        }
    }
    
    public EditorTab getSelectedEditorTab() {
        try {
            for(EditorTab editortab : editortabs) {
                if(tabbedpane.getTitleAt(tabbedpane.getSelectedIndex()).equals(editortab.getName())) {
                    return editortab;
                }
            }
            return null;
        } catch (Exception ex) {
            return null;
        }
    }

    public void updateAll() {
        try {
            try {
                delPreWork(pre_work_title);
                pre_work_title = addPreWork(getSelectedEditorTab().getName());
            } catch (Exception ex) {
                delPreWork(pre_work_title);
            }
        } catch (Exception ex) {
            StaticStandard.logErr("Error while updating editor: " + ex, ex);
        }
    }
    
    public boolean remove() {
        try {
            ArduinoProgrammer.editors.remove(this);
            return true;
        } catch (Exception ex) {
            return false;
        }
    }
    
    public void exit() {
        remove();
        close();
    }
    
    public void close() {
        dispose();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitpane = new javax.swing.JSplitPane();
        tabbedpane = new javax.swing.JTabbedPane();
        sp_console = new javax.swing.JScrollPane();
        console = new javax.swing.JEditorPane();
        MB = new javax.swing.JMenuBar();
        M1 = new javax.swing.JMenu();
        M1I1 = new javax.swing.JMenuItem();
        M2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        splitpane.setDividerLocation(220);
        splitpane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitpane.setLeftComponent(tabbedpane);

        console.setEditable(false);
        sp_console.setViewportView(console);

        splitpane.setRightComponent(sp_console);

        getContentPane().add(splitpane, java.awt.BorderLayout.CENTER);

        M1.setText("File");

        M1I1.setText("Exit");
        M1.add(M1I1);

        MB.add(M1);

        M2.setText("Edit");
        MB.add(M2);

        setJMenuBar(MB);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    private static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor(null, "Test").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenu M1;
    public javax.swing.JMenuItem M1I1;
    public javax.swing.JMenu M2;
    public javax.swing.JMenuBar MB;
    private javax.swing.JEditorPane console;
    private javax.swing.JScrollPane sp_console;
    private javax.swing.JSplitPane splitpane;
    public javax.swing.JTabbedPane tabbedpane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource() == M1I1) {
            exit();
        }
    }

    @Override
    public void windowOpened(WindowEvent e) {
    }

    @Override
    public void windowClosing(WindowEvent e) {
        if(e.getSource() == this) {
            exit();
        }
    }

    @Override
    public void windowClosed(WindowEvent e) {
    }

    @Override
    public void windowIconified(WindowEvent e) {
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
    }

    @Override
    public void windowActivated(WindowEvent e) {
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }
}
